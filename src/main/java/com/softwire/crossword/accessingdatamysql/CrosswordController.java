package com.softwire.crossword.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called clueRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClueRepository clueRepository;

    @Autowired
    private CrosswordRepository crosswordRepository;

    @Autowired
    private CrosswordClueMapRepository crosswordClueMapRepository;

    @PostMapping(path = "/clues") // Map ONLY POST Requests
    public @ResponseBody
    String addNewClue(@RequestParam String clue,
                      @RequestParam String answer,
                      @RequestParam String topic,
                      @RequestParam String style,
                      @RequestParam String author,
                      @RequestParam Integer difficulty) {
        Clue newClue = new Clue();
        newClue.setClue(clue);
        newClue.setClue(answer);
        newClue.setTopic(topic);
        newClue.setStyle(style);
        newClue.setAuthor(author);
        newClue.setDifficulty(difficulty);
        clueRepository.save(newClue);
        return "Saved";
    }

    @GetMapping(path = "/clues")
    public @ResponseBody
    Iterable<Clue> getAllClues() {
        // This returns a JSON or XML with the clues
        return clueRepository.findAll();
    }

    @PostMapping(path = "/crosswords") // Map ONLY POST Requests
    public @ResponseBody
    String addNewCrossword(@RequestParam int width,
                           @RequestParam String name) {
        Crossword newCrossword = new Crossword();
        newCrossword.setName(name);
        newCrossword.setWidth(width);
        crosswordRepository.save(newCrossword);
        return "Saved";
    }

    @GetMapping(path = "/crosswords")
    public @ResponseBody
    Iterable<Crossword> getAllCrossword() {
        // This returns a JSON or XML with the clues
        return crosswordRepository.findAll();
    }

    @GetMapping(path = "/crosswords/{id}")
    public @ResponseBody
    Optional<Crossword> getCrossword(@PathVariable int id) {
        // This returns a JSON or XML with the clues
        return crosswordRepository.findById(id);
    }

    @PostMapping(path = "/crosswords/{crosswordId}/clue") // Map ONLY POST Requests
    public @ResponseBody
    String addClueToCrossword(@PathVariable int crosswordId,
                              @RequestBody CrosswordClueMap crosswordClueMap) {
        var crossword = crosswordRepository.findById(crosswordId);
        crosswordClueMap.setCrossword(crossword.get());
        crosswordClueMapRepository.save(crosswordClueMap);
        return "Saved";
    }
}